<?php
//Include the ActiveRecord model
require_once 'Location.php';
/**
 * 
 *
 * @package Omeka
 * 
 **/
class Geolocation extends Kea_Plugin
{	
	protected $metaInfo = array(
			'description'=>'Uses the Google Maps API to allow Items to be associated with a geographical location.',
			'author'=>'Center for History & New Media');
	
	public function definition() {
		$this->hasConfig('Default Latitude', 'The default latitude for the map.', 50);
		$this->hasConfig('Default Longitude', 'The default longitude for the map.', 70);
		$this->hasConfig('Default ZoomLevel', 'The default zoom level for the map.', 5);
		$this->hasConfig('Google Maps API Key', 'The API key (plugin will not work properly without this).');
	
		
/*
			$this->hasType('Building', 'A man-made edifice', 
			array(
				array('name'=>'City', 'description'=>'The city in which a building is located.'),
				array('name'=>'County', 'description'=>'The county in which a building is located.'),
				array('name'=>'Owner Name', 'description'=>'The name of the person or entity who owns the building.')));
*/	
	}
	
	public function customInstall()
	{
		//Create the locations table
		$this->getDbConn()->execute("CREATE TABLE `locations` (
			`id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY ,
			`item_id` BIGINT UNSIGNED NOT NULL ,
			`latitude` DOUBLE NOT NULL ,
			`longitude` DOUBLE NOT NULL ,
			`zipcode` INT NOT NULL ,
			`zoom_level` INT NOT NULL ,
			`map_type` VARCHAR( 255 ) NOT NULL ,
			`address` TEXT NOT NULL ,
			INDEX ( `item_id` )
			) ENGINE = MYISAM ;");
	}

} // END class FooPlugin


/**
 * Return a multidimensional array of location info
 *
 * @param array|int $item_id
 * @return array
 **/
function get_location_for_item($item_id)
{
	$select = new Kea_Select;
	$select->from(array('Location', 'l'), 'l.*');
	
	if(is_array($item_id)) {
		foreach ($item_id as $id) {
			$select->orWhere('l.item_id = ?', $id);
		}
	}
	
	echo $select;exit;
		
	return $location;
}

	/**
	 * 
	 * 1) Note: the width and height setters will probably break in IE, I forgot how to fix this
	 * 3) If you want to submit these values via a form, be sure to include fields where id = latitude, longitude and zoomLevel, and each
	 * is prefixed with the $divName
	 * 4) This is pretty simple, but we can add all kinds of options to this in the future.
	 *
	 * @todo Add an option to specify an onClick handler that has been written in JavaScript elsewhere
	 * 
	 * @param int center latitude
	 * @param int center longitude
	 * @param int zoom level
	 * @param int width of map
	 * @param int height of map
	 * @param string ID of the map's (empty) div
	 * @param array Multidimensional Array like: $points[0]['latitude'] = 75, $points[0]['longitude'] = 40, etc.
	 * @param array extra options
	 * @return string
	 **/
	function google_map($latitude, $longitude, $zoomLevel, $width, $height, $divName = 'map', $uri, $options = array()) {
		echo "<div id=\"$divName\"></div>";
		//Load this junk in from the plugin config
		if(!$latitude || !$longitude) {
			$latitude = $this->getConfig('Default Latitude');
			$longitude = $this->getConfig('Default Longitude');
			$zoomLevel = $this->getConfig('Default Zoom Level');
		}
		
		require_once 'Zend/Json.php';
		$options = Zend_Json::encode($options);
		echo "<script>var $divName = new OmekaMap('$divName', '$uri', $latitude, $longitude, $zoomLevel, $width, $height, $options);</script>";
	}

?>
